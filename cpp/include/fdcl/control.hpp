/** \file control.hpp
*  \brief Control class used to generate motors outputs for a desired trajectory
*/

#ifndef FDCL_CONTROL_HPP
#define FDCL_CONTROL_HPP


// user headers
#include "common_types.hpp"
#include "fdcl/param.hpp"
#include "fdcl/integral_utils.hpp"
#include "fdcl/matrix_utils.hpp"


// external headers
#include "Eigen/Dense"


namespace fdcl
{
/** \brief Controller functions for the rover
 *
 * This class includes all the controllers used to control the rover	 
 * All controller related functions for the rover are included in this
 * class. This inlcudes two attitude controllers, a geometric controller and
 * a decoupled-yaw controller (ACC-2019) with a geometric position controller.
 */
class control
{
public:
    double t = 0.0;  /**< current loop time in seconds */
    double t_pre = 0.0;  /**< time of the previous loop in seconds */
    double dt = 1e-9;  /**< time step size in seconds */
    int freq = 100;  /**< control thread frequence */

    bool use_integral = false;  /**< flag to enable/disable integral control */

    // for integral controller
    fdcl::integral_error_vec3 eIR;
    fdcl::integral_error eI1;
    fdcl::integral_error eI2;
    fdcl::integral_error eIy;
    fdcl::integral_error_vec3 eIX;

    Vector3 eR = Vector3::Zero(); /**< attitude error */
    Vector3 eW = Vector3::Zero(); /**< angular rate error */
    Vector3 ei = Vector3::Zero(); /**< position integral error */
    Vector3 M = Vector3::Zero();  /**< control moments */

    Vector3 eX = Vector3::Zero(); /**< position error */
    Vector3 eV = Vector3::Zero(); /**< velocity error */

    Vector3 b1 = Vector3::Zero(); /**< direction of the first body axis */
    Vector3 b2 = Vector3::Zero(); /**< direction of the second body axis */
    Vector3 b3 = Vector3::Zero(); /**< direction of the third body axis */
    Vector3 b3_dot = Vector3::Zero(); /**< desired rate of change of b3 axis */

    Eigen::Matrix<double, 4, 4> fM_to_forces_inv; /**< Force to force-moment
        * conversion matrix
        */
    Vector4 f_motor; /**< Calculated forces required by each moter */

    Vector4 fM = Vector4::Zero(); /**< force-moment vector */

    double f_total = 0.0;  /**< total propeller thrust */
   
    control(
        fdcl::state_t *&state_,
        fdcl::command_t *&command_,
        fdcl::param *config_file_  /**< pointer to the external fdcl::param
            * object, which is used to load configuration parameters
            */
    );
    control(void);
    ~control(void);

    /** \fn void init(void)
     * Initialize the variables in the controller class
     */
    void init(void);

    /** \fn void load_config(void)
     * Loads the class parameters from the config file.
     */
    void load_config(void);

    /** \fn void set_error_to_zero(void)
     * Set all integral errors to zero.
     */
    void set_error_to_zero(void);

    /** \fn void attitude_control(void)
     * Decouple-yaw controller proposed on "Geometric Controls of a Quadrotor
     * with a Decoupled Yaw control"
     */
    void attitude_control(void);

    /** \fn void position_control(void)
     * Position controller as proposed in "Geometric Controls of a Quadrotor
     * with a Decoupled Yaw control"
     */
    void position_control(void);


    /** \fn double get_time(void)
     * Returns the current time in seonds from the start of the class.
     * @return  current time in seonds from the start of the class
     */
    double get_time(void);

private:
    fdcl::state_t *state = nullptr;
    fdcl::command_t *command = nullptr;
    fdcl::param *config_file = nullptr; /**< fdcl::param object */

    Vector3 e1; /**< direction of the first axis of the fixed frame */
    Vector3 e2; /**< direction of the second axis of the fixed frame */
    Vector3 e3; /**< direction of the third axis of the fixed frame */

    double m = 0.0;  /**< mass of the rover */
    double g = 9.81;  /**< gravitational acceleration */
    Matrix3 J = Matrix3::Zero();  /**< inertia matrix for the rover */
    double c_tf = 0.0;  /**< torsional moment generated by the propellers */
    double l = 0.0;  /**< length of the rover arm */

    struct timespec tspec_init; /**< time data at the beggining of the class */
    struct timespec tspec_curr; /**< current time data */

     // Attitude gains
    Matrix3 kR = Matrix3::Zero();  /**< attitude gains */
    Matrix3 kW = Matrix3::Zero();  /**< angular rate gains */
    double kyw = 0.0; /**< yaw angular rate gain for decoupled-yaw controller */

    // position gains
    Matrix3 kX = Matrix3::Zero(); /**< position gains */
    Matrix3 kV = Matrix3::Zero(); /**< velocity gains */

    // integral gains
    double kIR = 0.0;  /**< attitude integral gain */
    double ki = 0.0;  /**< position integral gain */
    double kI = 0.0;  /**< attitude integral gain for roll and pitch */
    double kyI = 0.0;  /**< attitude integral gain for yaw */
    double kIX = 0.0;  /**< position integral gains */
    double c1 = 0.0;  /**< parameters for decoupled-yaw integral control */
    double c2 = 0.0;  /**< parameters for decoupled-yaw integral control */
    double c3 = 0.0;  /**< parameters for decoupled-yaw integral control */

};  // end of control class

}  // end of namespace fdcl

#endif
